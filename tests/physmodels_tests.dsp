import("stdfaust.lib");

pm = library("physmodels.lib");
os = library("oscillators.lib");
ma = library("maths.lib");

f2l_test = pm.f2l(440);
l2f_test = pm.l2f(0.75);
l2s_test = pm.l2s(1.2);
basicBlock_test = pm.endChain(pm.basicBlock);
chain_test = pm.endChain(pm.chain(pm.in(0.1) : pm.basicBlock));
inLeftWave_test = pm.endChain(pm.inLeftWave(0.25));
inRightWave_test = pm.endChain(pm.inRightWave(0.25));
in_test = pm.endChain(pm.in(0.25));
outLeftWave_test = pm.outLeftWave(0.1, 0.2, 0.3);
outRightWave_test = pm.outRightWave(0.1, 0.2, 0.3);
out_test = pm.out(0.1, 0.2, 0.3);
terminations_test = pm.endChain(pm.terminations(*(-1), pm.basicBlock, *(-1)));
lTermination_test = pm.endChain(pm.lTermination(*(-1), pm.basicBlock));
rTermination_test = pm.endChain(pm.rTermination(pm.basicBlock, *(-1)));
closeIns_test = pm.closeIns;
closeOuts_test = pm.closeIns : pm.closeOuts;
endChain_test = pm.endChain(pm.basicBlock);
waveguideUd_test = pm.endChain(pm.waveguideUd(512, 32));
waveguideFd_test = pm.endChain(pm.waveguideFd(512, 32));
waveguideFd2_test = pm.endChain(pm.waveguideFd2(512, 32));
waveguideFd4_test = pm.endChain(pm.waveguideFd4(512, 32));
waveguide_test = pm.endChain(pm.waveguide(512, 32));
bridgeFilter_test = pm.bridgeFilter(0.6, 0.4, os.osc(110));
modeFilter_test = pm.modeFilter(440, 1.5, 0.8);
stringSegment_test = pm.endChain(pm.stringSegment(1.0, 0.5));
openString_test = pm.endChain(pm.openString(0.8, 0.5, 0.2, pm.impulseExcitation(button("pm.openString/gate"))));
nylonString_test = pm.endChain(pm.nylonString(0.8, 0.3, pm.impulseExcitation(button("pm.nylonString/gate"))));
steelString_test = pm.endChain(pm.steelString(0.8, 0.3, pm.impulseExcitation(button("pm.steelString/gate"))));
openStringPick_test = pm.endChain(pm.openStringPick(0.8, 0.4, 0.3, pm.impulseExcitation(button("pm.openStringPick/gate"))));
openStringPickUp_test = pm.endChain(pm.openStringPickUp(0.8, 0.4, 0.6, 0.7, pm.impulseExcitation(button("pm.openStringPickUp/gate"))));
openStringPickDown_test = pm.endChain(pm.openStringPickDown(0.8, 0.4, 0.6, 0.5, pm.impulseExcitation(button("pm.openStringPickDown/gate"))));
ksReflexionFilter_test = os.osc(220) : pm.ksReflexionFilter;
rStringRigidTermination_test = pm.endChain(pm.rStringRigidTermination);
lStringRigidTermination_test = pm.endChain(pm.lStringRigidTermination);
elecGuitarBridge_test = pm.endChain(pm.elecGuitarBridge);
elecGuitarNuts_test = pm.endChain(pm.elecGuitarNuts);
guitarBridge_test = pm.endChain(pm.guitarBridge);
guitarNuts_test = pm.endChain(pm.guitarNuts);
idealString_test = pm.closeIns : pm.idealString(0.9, 0.2, pm.impulseExcitation(button("pm.idealString/gate")));
ks_test = pm.ks(0.9, 0.3, pm.impulseExcitation(button("pm.ks/gate")));
ks_ui_MIDI_test = pm.ks_ui_MIDI;
elecGuitarModel_test = pm.elecGuitarModel(0.9, 0.3, 0.8, pm.impulseExcitation(button("pm.elecGuitarModel/gate")));
elecGuitar_test = pm.elecGuitar(0.9, 0.3, 0.8, 0.6, button("pm.elecGuitar/gate"));
elecGuitar_ui_MIDI_test = pm.elecGuitar_ui_MIDI;
guitarBody_test = pm.endChain(pm.guitarBody);
guitarModel_test = pm.guitarModel(0.9, 0.25, pm.impulseExcitation(button("pm.guitarModel/gate")));
guitar_test = pm.guitar(0.9, 0.25, 0.8, button("pm.guitar/gate"));
guitar_ui_MIDI_test = pm.guitar_ui_MIDI;
nylonGuitarModel_test = pm.nylonGuitarModel(0.9, 0.25, pm.impulseExcitation(button("pm.nylonGuitarModel/gate")));
nylonGuitar_test = pm.nylonGuitar(0.9, 0.25, 0.8, button("pm.nylonGuitar/gate"));
nylonGuitar_ui_MIDI_test = pm.nylonGuitar_ui_MIDI;
modeInterpRes_test = os.osc(110) : pm.modeInterpRes(20, 1.0, 1.5);
modularInterpBody_test = pm.endChain(pm.modularInterpBody(20, 1.0, 1.5));
modularInterpStringModel_test = pm.modularInterpStringModel(0.9, 0.3, 1.0, 1.5, pm.impulseExcitation(button("pm.modularInterpStringModel/body")), pm.impulseExcitation(button("pm.modularInterpStringModel/string")));
modularInterpInstr_test = pm.modularInterpInstr(0.9, 0.3, 1.0, 1.5, 0.8, button("pm.modularInterpInstr/body"), button("pm.modularInterpInstr/string"));
modularInterpInstr_ui_MIDI_test = pm.modularInterpInstr_ui_MIDI;
bowTable_test = pm.bowTable(0.4, 0.1);
violinBowTable_test = pm.violinBowTable(0.4, 0.1);
bowInteraction_test = pm.bowInteraction((0.4, 0.05));
violinBow_test = pm.violinBow(0.4, 0.05);
violinBowedString_test = pm.endChain(pm.violinBowedString(0.82, 0.35, 0.2, 0.15));
violinNuts_test = pm.closeIns : pm.violinNuts;
violinBridge_test = pm.closeIns : pm.violinBridge;
violinBody_test = pm.closeIns : pm.violinBody;
violinModel_test = pm.violinModel(0.82, 0.35, 0.2, 0.15);
violin_ui_test = pm.violin_ui;
violin_ui_MIDI_test = pm.violin_ui_MIDI;
openTube_test = pm.openTube(0.9);
reedTable_test = pm.reedTable(0.4, 0.2);
fluteJetTable_test = pm.fluteJetTable(0.5);
brassLipsTable_test = pm.brassLipsTable(0.3, 0.2);
clarinetReed_test = os.osc(440) : pm.clarinetReed(0.6);
clarinetMouthPiece_test = pm.clarinetMouthPiece(0.6, 0.4, 0.1);
brassLips_test = pm.brassLips(0.3, 0.2, 0.1);
fluteEmbouchure_test = pm.fluteEmbouchure(0.5, 0.3);
wBell_test = pm.wBell(0.4, 0.6);
fluteHead_test = pm.fluteHead(0.8, 0.4, 0.3);
fluteFoot_test = pm.fluteFoot(0.8, 0.4, 0.3);
clarinetModel_test = pm.clarinetModel(0.9, 0.4, 0.3, 0.2);
clarinetModel_ui_test = pm.clarinetModel_ui;
clarinet_ui_test = pm.clarinet_ui;
clarinet_ui_MIDI_test = pm.clarinet_ui_MIDI;
brassModel_test = pm.brassModel(0.9, 0.4, 0.2, 0.6);
brassModel_ui_test = pm.brassModel_ui;
brass_ui_test = pm.brass_ui;
brass_ui_MIDI_test = pm.brass_ui_MIDI;
fluteModel_test = pm.fluteModel(0.9, 0.4, 0.6);
fluteModel_ui_test = pm.fluteModel_ui;
flute_ui_test = pm.flute_ui;
flute_ui_MIDI_test = pm.flute_ui_MIDI;
impulseExcitation_test = pm.impulseExcitation(button("pm.impulseExcitation/gate"));
strikeModel_test = pm.strikeModel(200, 4000, 0.5, 0.8, button("pm.strikeModel/gate"));
strike_test = pm.strike(0.4, 0.5, 0.8, button("pm.strike/gate"));
pluckString_test = pm.pluckString(0.9, 1, 1, 1, 0.6, button("pm.pluckString/gate"));
blower_test = pm.blower(0.5, 0.05, 2000, 5, 0.2);
blower_ui_test = pm.blower_ui;
djembeModel_test = pm.djembeModel(110);
djembe_test = pm.djembe(110, 0.3, 0.5, 0.8, button("pm.djembe/gate"));
djembe_ui_MIDI_test = pm.djembe_ui_MIDI;
marimbaBarModel_test = pm.marimbaBarModel(220);
marimbaResTube_test = pm.marimbaResTube(220);
marimbaModel_test = pm.marimbaModel(220);
marimba_test = pm.marimba(220, 0.4, 1, 0.5, 0.8, button("pm.marimba/gate"));
marimba_ui_MIDI_test = pm.marimba_ui_MIDI;
churchBellModel_test = pm.churchBellModel(50, 0.3, 30, 1.0, 2.5);
churchBell_test = pm.churchBell(0.4, 2000, 0.5, 0.8, button("pm.churchBell/gate"));
churchBell_ui_test = pm.churchBell_ui;
englishBellModel_test = pm.englishBellModel(50, 0.3, 30, 1.0, 2.5);
englishBell_test = pm.englishBell(0.4, 2000, 0.5, 0.8, button("pm.englishBell/gate"));
englishBell_ui_test = pm.englishBell_ui;
frenchBellModel_test = pm.frenchBellModel(50, 0.3, 30, 1.0, 2.5);
frenchBell_test = pm.frenchBell(0.4, 2000, 0.5, 0.8, button("pm.frenchBell/gate"));
frenchBell_ui_test = pm.frenchBell_ui;
germanBellModel_test = pm.germanBellModel(50, 0.3, 30, 1.0, 2.5);
germanBell_test = pm.germanBell(0.4, 2000, 0.5, 0.8, button("pm.germanBell/gate"));
germanBell_ui_test = pm.germanBell_ui;
russianBellModel_test = pm.russianBellModel(50, 0.3, 30, 1.0, 2.5);
russianBell_test = pm.russianBell(0.4, 2000, 0.5, 0.8, button("pm.russianBell/gate"));
russianBell_ui_test = pm.russianBell_ui;
standardBellModel_test = pm.standardBellModel(50, 0.3, 30, 1.0, 2.5);
standardBell_test = pm.standardBell(0.4, 2000, 0.5, 0.8, button("pm.standardBell/gate"));
standardBell_ui_test = pm.standardBell_ui;
formantValues_test = pm.formantValues.f(0);
voiceGender_test = pm.voiceGender(0.5);
skirtWidthMultiplier_test = pm.skirtWidthMultiplier(0.5);
autobendFreq_test = pm.autobendFreq(440, 0.5);
vocalEffort_test = pm.vocalEffort(0.6);
fof_test = pm.fof(0.3, 440, 880, 0.5);
fofSH_test = pm.fofSH(0.3, 440, 880, 0.5);
//fofCycle_test = pm.fofCycle(0.3, 440, 880, 0.5, 0.2);
fofSmooth_test = pm.fofSmooth(0.3, 440, 880, 0.5, 0.2);
//formantFilterFofCycle_test = pm.formantFilterFofCycle(0, 0, 5, 0, 200);
//formantFilterFofSmooth_test = pm.formantFilterFofSmooth(0, 0, 5, 0, 200);
formantFilterBP_test = pm.formantFilterBP(0, 0, 5, 0, 200);
//formantFilterbank_test = pm.formantFilterbank(0, 0, 5, 0);
formantFilterbankFofCycle_test = pm.formantFilterbankFofCycle(0, 0, 5);
formantFilterbankFofSmooth_test = pm.formantFilterbankFofSmooth(0, 0, 5);
formantFilterbankBP_test = pm.formantFilterbankBP(0, 0, 5);
//SFFormantModel_test = pm.SFFormantModel(0, 0, 0.5, 0.6, 100, 2, 1, 1);
SFFormantModelFofCycle_test = pm.SFFormantModelFofCycle(0.5, 0.6, 0.7);
SFFormantModelFofSmooth_test = pm.SFFormantModelFofSmooth(0.5, 0.6, 0.7);
SFFormantModelBP_test = pm.SFFormantModelBP(0.5, 0.6, 0.7);
SFFormantModelFofCycle_ui_test = pm.SFFormantModelFofCycle_ui;
SFFormantModelFofSmooth_ui_test = pm.SFFormantModelFofSmooth_ui;
SFFormantModelBP_ui_test = pm.SFFormantModelBP_ui;
SFFormantModelFofCycle_ui_MIDI_test = pm.SFFormantModelFofCycle_ui_MIDI;
SFFormantModelFofSmooth_ui_MIDI_test = pm.SFFormantModelFofSmooth_ui_MIDI;
SFFormantModelBP_ui_MIDI_test = pm.SFFormantModelBP_ui_MIDI;
allpassNL_test = pm.closeIns : pm.allpassNL(0.4);
modalModel_test = os.impulse : pm.modalModel(3, (440,660,880), (0.5,0.4,0.3), (0.8,0.6,0.4));
rk_solve_test = pm.rk_solve((0), (1), 1, 1.0/ma.SR, eq, (1)) with { eq(t,x) = -x; };
