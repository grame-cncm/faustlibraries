//----------------------------------------------------------------------------
// basics_tests.dsp
// Tests for basics helper functions.
//----------------------------------------------------------------------------

ba = library("basics.lib");
ma = library("maths.lib");
os = library("oscillators.lib");

samp2sec_test = ba.samp2sec(512);
sec2samp_test = ba.sec2samp(0.01);
db2linear_test = ba.db2linear(-6);
linear2db_test = ba.linear2db(0.5);
lin2LogGain_test = ba.lin2LogGain(0.5);
log2LinGain_test = ba.log2LinGain(0.25);
tau2pole_test = ba.tau2pole(0.01);
pole2tau_test = ba.pole2tau(0.9);
midikey2hz_test = ba.midikey2hz(60);
hz2midikey_test = ba.hz2midikey(440);
semi2ratio_test = ba.semi2ratio(7);
ratio2semi_test = ba.ratio2semi(2.0);
cent2ratio_test = ba.cent2ratio(100);
ratio2cent_test = ba.ratio2cent(1.5);
pianokey2hz_test = ba.pianokey2hz(49);
hz2pianokey_test = ba.hz2pianokey(440);
counter_test = ba.counter(button("trig"));
countdown_test = ba.countdown(8, button("trig"));
countup_test = ba.countup(8, button("trig"));
sweep_test = ba.sweep(64, checkbox("run"));
time_test = ba.time;
ramp_test = os.osc(1) : ba.ramp(256);
line_test = os.osc(1) : ba.line(256);
tempo_test = ba.tempo(120);
period_test = ba.period(64);
spulse_test = ba.spulse(32, button("trig"));
pulse_test = ba.pulse(64);
pulsen_test = ba.pulsen(8, 64);
cycle_test = button("gate") : ba.cycle(3);
beat_test = ba.beat(120);
pulse_countup_test = ba.pulse_countup(button("run"));
pulse_countdown_test = ba.pulse_countdown(button("run"));
pulse_countup_loop_test = ba.pulse_countup_loop(4, button("run"));
pulse_countdown_loop_test = ba.pulse_countdown_loop(4, button("run"));
resetCtr_test = ba.pulse(16) : ba.resetCtr(4, 2);
count_test = ba.count((10,20,30,40));
take_test = ba.take(3, (10,20,30,40));
pick_test = ba.pick((10,20,30,40), 2);
pickN_test = (1,2,3,4) : ba.pickN(4, (0,2));
subseq_test = ba.subseq((10,20,30,40,50), 1, 3);
tabulate_test = ba.tabulate(1, ba.midikey2hz, 128, 0, 127, 60).lin;
tabulate_chebychev_test = ba.tabulate_chebychev(1, ba.midikey2hz, 32, 4, 0, 127, 60);
powSin(x,y) = sin(pow(x,y));
tabulateNd_test = ba.tabulateNd(1, powSin, (8,8, 2.0,2.0, 8.0,8.0, 3.0,4.0)).lin;
if_test = ba.if(1, 0.5, -0.5);
ifNc_test = ba.ifNc((1, 10, 0, 20, 30));
ifNcNo_test = (1, 10, 0, 20, 30) : ba.ifNcNo(2, 1);
selector_test = (0.1, 0.2, 0.3, 0.4) : ba.selector(2, 4);
select2stereo_test = ba.select2stereo(1, (0.1,0.2, 0.3,0.4));
selectn_test = (1,2,3,4) : ba.selectn(4, 2);
selectbus_test = (1,2,3,4) : ba.selectbus(2, 2, 1);
selectxbus_test = (1,2,3,4) : ba.selectxbus(2, 2, 16, checkbox("bus"));
effects = ((_*0.5,_*0.5),(_*0.25,_*0.25));
choice = int(checkbox("choice"));
selectmulti_test = (os.osc(440), os.osc(660)) : ba.selectmulti(ma.SR/100, effects, choice);
selectoutn_test = 1 : ba.selectoutn(3, 1);
latch_test = os.osc(2) : ba.latch(button("hold"));
sAndH_test = os.osc(2) : ba.sAndH(button("hold"));
isPositive(x) = x > 0.0;
tAndH_test = os.osc(2) : ba.tAndH(isPositive);
downSample_test = os.osc(440) : ba.downSample(11025);
downSampleCV_test = os.osc(440) : ba.downSampleCV(0.5);
peakhold_test = os.osc(440) : ba.peakhold(1);
peakholder_test = os.osc(440) : ba.peakholder(ba.sec2samp(0.1));
kr2ar_test = button("gate") : ba.kr2ar;
impulsify_test = os.osc(440) : ba.impulsify;
autoControl = hslider("autoControl", 0.2, 0, 1, 0.01);
automat_test = autoControl : ba.automat(120, 4, 0.0);
listInterp_test = ba.listInterp((800,400,350,450,325), 1.5);
bypass1_test = os.osc(440) : ba.bypass1(button("bypass"), *(0.5));
bypass2_test = (os.osc(440), os.osc(660)) : ba.bypass2(button("bypass"), par(i,2, *(0.5)));
monoToStereo(x) = (x*0.5, x*0.25);
bypass1to2_test = os.osc(440) : ba.bypass1to2(button("bypass"), monoToStereo);
bypass_fade_test = (os.osc(440), os.osc(660)) : ba.bypass_fade(128, button("bypass"), par(i,2, *(0.5)));
toggle_test = ba.toggle(button("trig"));
on_and_off_test = button("on"), button("off") : ba.on_and_off;
bitcrusher_test = os.osc(440) : ba.bitcrusher(8);
mulaw_bitcrusher_test = os.osc(440) : ba.mulaw_bitcrusher(2.0, 8);
slidingReduce_test = os.osc(440) : ba.slidingReduce(max, 64, 64, 0 - ma.MAX);
slidingSum_test = os.osc(440) : ba.slidingSum(64);
slidingSump_test = os.osc(440) : ba.slidingSump(64, 128);
slidingMax_test = os.osc(440) : ba.slidingMax(64, 128);
slidingMin_test = os.osc(440) : ba.slidingMin(64, 128);
slidingMean_test = os.osc(440) : ba.slidingMean(64);
slidingMeanp_test = os.osc(440) : ba.slidingMeanp(64, 128);
slidingRMS_test = os.osc(440) : ba.slidingRMS(64);
slidingRMSp_test = os.osc(440) : ba.slidingRMSp(64, 128);
parallelOp_test = (0.2, 0.5, 0.1) : ba.parallelOp(max, 3);
parallelMax_test = (0.2, 0.5, 0.1) : ba.parallelMax(3);
parallelMin_test = (0.2, 0.5, 0.1) : ba.parallelMin(3);
parallelMean_test = (0.2, 0.5, 0.1) : ba.parallelMean(3);
parallelRMS_test = (0.2, 0.5, 0.1) : ba.parallelRMS(3);
